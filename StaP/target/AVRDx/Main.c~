#include "FreeRTOS.h"
#include "task.h"
#include "Scheduler.h"
#include "Setup.h"
#include "StaP.h"

int main( void )
{
  portDISABLE_INTERRUPTS();

  STAP_Initialize();
  
  mainLoopSetup();

  StaP_SchedulerInit();

  /* Start the tasks and timer running. */
  
  vTaskStartScheduler();

  // Should never get here

  STAP_Panic(STAP_ERR_FELLTHROUGH);
    
  return 0;
}

/* vApplicationStackOverflowHook is called when a stack overflow occurs.
This is usefull in application development, for debugging.  To use this
hook, uncomment it, and set configCHECK_FOR_STACK_OVERFLOW to 1 in
"FreeRTOSConfig.h" header file. */

void vApplicationStackOverflowHook(TaskHandle_t pxTask, char *pcTaskName )
{
  int i = 0;

  while(taskList[i].code && taskList[i].handle != pxTask)
    i++;

  if(!taskList[i].code)
    STAP_Panic(STAP_ERR_STACK_OVF_IDLE);
  else
    STAP_Panic(STAP_ERR_STACK_OVF + i);
}

/* vApplicationMallocFailedHook is called when memorry allocation fails.
This is usefull in application development, for debugging.  To use this
hook, uncomment it, and set configUSE_MALLOC_FAILED_HOOK to 1 in
"FreeRTOSConfig.h" header file. */

void vApplicationMallocFailedHook( void )
{
  STAP_Panic(STAP_ERR_MALLOC_FAIL);
}
