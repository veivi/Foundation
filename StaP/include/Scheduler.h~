#ifndef STAP_SCHEDULER_H
#define STAP_SCHEDULER_H

#include "VPTime.h"
#include "StaP.h"

//
// Task structure
//

struct TaskDecl {
  void *handle;
  const char *name;
  void (*code)(void);
  VP_TIME_MILLIS_T period;
  StaP_Notification_T signal;
  uint16_t stack;
  uint8_t priority;
  bool periodIsTimeout;
  VP_TIME_MILLIS_T lastInvoked;
};

extern struct TaskDecl taskList[];

#define HZ_TO_PERIOD(f) ((VP_TIME_MILLIS_T) (1.0e3f/(f)))

#define TASK_PERIOD_SIGNAL(n, c, p, pri, s, st)				\
  { .name = n, .code = c, .period = p, .priority = pri, .signal = s, .stack = st, .periodIsTimeout = false }
#define TASK_TIMEOUT_SIGNAL(n, c, p, pri, s, st)			\
  { .name = n, .code = c, .period = p, .priority = pri, .signal = s, .stack = st, .periodIsTimeout = true }
#define TASK_SIGNAL(n, c, lat, pri, s, st) TASK_PERIOD_SIGNAL(n, c, lat, pri, s, st)
#define TASK_SIGNAL_TO(n, c, to, pri, s, st) TASK_TIMEOUT_SIGNAL(n, c, to, pri, s, st)
#define TASK_PERIOD(n, c, per, pri) TASK_PERIOD_SIGNAL(n, c, per, pri, StaP_Notify_Invalid, 0)
#define TASK_FREQ(n, c, freq, pri) TASK_PERIOD(n, c, HZ_TO_PERIOD(freq), pri)
#define TASK_FREQ_ST(n, c, freq, pri, st) TASK_PERIOD_SIGNAL(n, c, HZ_TO_PERIOD(freq), pri, StaP_Notify_Invalid, st)

void StaP_SchedulerInit( void );

#endif
